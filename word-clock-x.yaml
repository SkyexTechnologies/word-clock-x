substitutions:
  name: "word-clock-x"
  room: ""
  friendly_name: "Word Clock"
  project_name: "Skyex Technologies.Word Clock"
  project_version: "1.0.0"
  hidden_ssid: "false"
  factory_reset_disabled: "true"

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  on_boot:
    priority: -10
    then:
      - light.turn_on: 
          id: word_clock
          effect: Clock

esp8266:
  board: esp01_1m

logger:

api:

ota:

wifi:
  fast_connect: ${hidden_ssid}
  ap: {}

captive_portal:

improv_serial:
  
dashboard_import:
  package_import_url: github://SkyexTechnologies/word-clock-x/word-clock-x.yaml@main
  import_full_config: false

button:
  - platform: restart
    name: Restart ${friendly_name}

select:
  - platform: template
    id: transition
    name: Light Transition
    restore_value: True
    optimistic: True
    options: 
      - None
      - Slow

time:
  - platform: sntp
    id: sntp_time

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2813
    pin: GPIO2
    num_leds: 121
    name: Word Clock
    id: word_clock
    on_turn_on:
      then:
        - light.turn_on: 
            id: word_clock
            effect: Clock
    effects:
      - addressable_lambda:
          name: "Clock"
          update_interval: 20ms
          lambda: |-
            static int minutes;
            static int hours;
            static int CurrentTime[4];
            static int PreviousTime[4];
            static int fade;
            
            static Color letters[121];
            const int words[32][12] {
              {  0,  1,  2,  4,  5, -1, -1, -1, -1, -1, -1, -1}, // # [0]  - HET IS
              { 99,100,101, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [1]  - UUR
              {  7,  8,  9, 10, 22, 23, 24, 25, -1, -1, -1, -1}, // # [2]  - VIJF OVER
              { 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1}, // # [3]  - TIEN OVER
              { 28, 29, 30, 31, 32, 33, 34, 35, 36, -1, -1, -1}, // # [4]  - KWART OVER
              { 18, 19, 20, 21, 11, 12, 13, 14, 40, 41, 42, 43}, // # [5]  - TIEN VOOR HALF
              {  7,  8,  9, 10, 11, 12, 13, 14, 40, 41, 42, 43}, // # [6]  - VIJF VOOR HALF
              { 40, 41, 42, 43, -1, -1, -1, -1, -1, -1, -1, -1}, // # [7]  - HALF
              {  7,  8,  9, 10, 22, 23, 24, 25, 40, 41, 42, 43}, // # [8]  - VIJF OVER HALF
              { 18, 19, 20, 21, 22, 23, 24, 25, 40, 41, 42, 43}, // # [9]  - TIEN OVER HALF
              { 28, 29, 30, 31, 32, 44, 45, 46, 47, -1, -1, -1}, // # [10] - KWART VOOR
              { 18, 19, 20, 21, 11, 12, 13, 14, -1, -1, -1, -1}, // # [11] - TIEN VOOR
              {  7,  8,  9, 10, 11, 12, 13, 14, -1, -1, -1, -1}, // # [12] - VIJF VOOR
              {104,105,106,107,108,109, -1, -1, -1, -1, -1, -1}, // # [13] - TWAALF
              { 51, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [14] - EEN
              { 62, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1}, // # [15] - TWEE
              { 55, 56, 57, 58, -1, -1, -1, -1, -1, -1, -1, -1}, // # [16] - DRIE
              { 66, 67, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1}, // # [17] - VIER
              { 70, 71, 72, 73, -1, -1, -1, -1, -1, -1, -1, -1}, // # [18] - VIJF
              { 74, 75, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [19] - ZES
              { 83, 84, 85, 86, 87, -1, -1, -1, -1, -1, -1, -1}, // # [20] - ZEVEN
              { 88, 89, 90, 91, -1, -1, -1, -1, -1, -1, -1, -1}, // # [21] - ACHT
              { 77, 78, 79, 80, 81, -1, -1, -1, -1, -1, -1, -1}, // # [22] - NEGEN
              { 92, 93, 94, 95, -1, -1, -1, -1, -1, -1, -1, -1}, // # [23] - TIEN
              { 96, 97, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [24] - ELF
              {116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [25] - Z
              {110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [26] - M
              {111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [27] - D
              {112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [28] - W
              {113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [29] - D
              {114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // # [30] - V
              {115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}  // # [31] - Z
            };

            if (initial_run) {
              it.all() = Color::BLACK;
              std::fill_n(letters, it.size(), Color::BLACK);
              fade = 100;
            }
            
            auto time = id(sntp_time).now();
            if (!time.is_valid()) {
              return;
            }

            minutes = int((time.minute)/5)*5;
            if (minutes < 20 and minutes >= 0) hours = time.hour; else hours = time.hour + 1;

            CurrentTime[0] = 0;
            CurrentTime[1] = minutes / 5 + 1;
            CurrentTime[2] = (hours % 12) + 13;
            CurrentTime[3] = time.day_of_week + 24;

            if (PreviousTime[1] == CurrentTime[1]) {
              std::fill_n(letters, it.size(), Color::BLACK);
              for (int i = 0; i < 4; i++) for (int j = 0; j < 12; j++) if (words[CurrentTime[i]][j] >= 0) letters[words[CurrentTime[i]][j]] = current_color;
            }
            

            if (id(transition).index_of("Slow") == id(transition).active_index() && !initial_run) {
              // Fade words from selected brightness down to zero, when time changes.
              if (PreviousTime[1] != CurrentTime[1] && fade > 0) {
                for (int i = 0; i < it.size(); i++) it[i] = Color(int(letters[i].r*fade/100), int(letters[i].g*fade/100), int(letters[i].b*fade/100));
                fade--;
                return;
              }

              // Set previous time to current time, such that above code will not run again. 
              for (int i = 0; i < 4; i++) PreviousTime[i] = CurrentTime[i];
              
              // Now that new pixels for current time are known, slowly fade in the words.
              if (fade < 100) {
                for (int i = 0; i < it.size(); i++) it[i] = Color(int(letters[i].r*fade/100), int(letters[i].g*fade/100), int(letters[i].b*fade/100));
                fade++;
                return;
              }
            }
              
            for (int i = 0; i < it.size(); i++) it[i] = letters[i];

            // Set previous time to current time, such that above code will not run again. 
            for (int i = 0; i < 4; i++) PreviousTime[i] = CurrentTime[i];